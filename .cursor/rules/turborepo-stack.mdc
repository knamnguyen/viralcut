---
description: 
globs: 
alwaysApply: true
---

# T3 Turbo Stack Architecture Overview

This project is built using the T3 Turbo Stack - a full-stack, typesafe monorepo template leveraging the best technologies in the modern web development ecosystem.

## Core Technologies

### Monorepo Structure
- **Turborepo**: Build system for JavaScript/TypeScript monorepos
- **pnpm**: Fast, disk space efficient package manager
- **TypeScript**: Strongly typed JavaScript superset across the entire codebase

### Frontend (apps/nextjs)
- **Next.js**: React framework using the App Router architecture
- **Tailwind CSS**: Utility-first CSS framework
- **shadcn/ui**: Reusable UI components built with Radix UI and Tailwind

### Backend & Data Layer
- **Supabase**: PostgreSQL database with a rich ecosystem of tools
- **Prisma**: Type-safe ORM with auto-generated client
- **tRPC**: End-to-end typesafe API layer connecting frontend and backend
- **Zod**: TypeScript-first schema validation

### Authentication & Payments
- **Clerk**: Complete user management and authentication solution
- **Stripe**: Payment processing for subscriptions and one-time payments

## Code Organization

### Apps Directory
- `/apps/nextjs`: Main Next.js application with App Router
- (Future) `/apps/expo`: React Native mobile application

### Packages Directory
- `/packages/api`: tRPC router definitions and API endpoints
- `/packages/db`: Prisma schema, client configuration, and migrations
- `/packages/ui`: Shared UI components using shadcn/ui
- `/packages/validators`: Shared Zod validation schemas
- `/packages/stripe`: Stripe service implementation

## Architectural Patterns

1. **Type Safety**: All communication between services is fully typed
2. **API Layer**: tRPC connects frontend and backend with type-safe queries and mutations
3. **Database Access**: Prisma provides type-safe database access with migrations
4. **Auth Flow**: Clerk handles authentication with middleware protection
5. **Component Library**: shadcn/ui components are customized and extended for the application

## Development Guidelines

1. Follow directory-specific patterns when adding new features
2. When extending the application, add new tRPC router endpoints to `packages/api/src/router`
3. Database schema changes should be made in `packages/db/prisma/schema.prisma`
4. UI components should be added to `packages/ui/src/components`
5. Shared validation logic belongs in `packages/validators/src`

## Future Extensions

1. React Native with Expo will be added to the `/apps` directory
2. Email functionality will be implemented using a service like Resend or SendGrid
3. Additional authentication providers may be integrated through Clerk