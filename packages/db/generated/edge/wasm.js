
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StripePaymentScalarFieldEnum = {
  id: 'id',
  clerkUserId: 'clerkUserId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  stripePaymentId: 'stripePaymentId',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  username: 'username',
  primaryEmailAddress: 'primaryEmailAddress',
  imageUrl: 'imageUrl',
  clerkUserProperties: 'clerkUserProperties',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FounderLogTagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FounderLogEntryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  content: 'content',
  upvoteCount: 'upvoteCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FounderLogEntryTagScalarFieldEnum = {
  id: 'id',
  entryId: 'entryId',
  tagId: 'tagId',
  createdAt: 'createdAt'
};

exports.Prisma.FounderLogReflectionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Post: 'Post',
  StripePayment: 'StripePayment',
  User: 'User',
  FounderLogTag: 'FounderLogTag',
  FounderLogEntry: 'FounderLogEntry',
  FounderLogEntryTag: 'FounderLogEntryTag',
  FounderLogReflection: 'FounderLogReflection'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "edge",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/knamnguyen/Documents/0-Programming/founderlog/packages/db/generated/edge",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [
      "driverAdapters"
    ],
    "sourceFilePath": "/Users/knamnguyen/Documents/0-Programming/founderlog/packages/db/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.8.2",
  "engineVersion": "2060c79ba17c6bb9f5823312b6f6b7f4a845738e",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\n//binaryTargets to handle the client for production environment on vercel\n//specify output locations so that path resolve work with turbo repo\ngenerator client {\n  provider      = \"prisma-client-js\"\n  output        = \"../generated/node\"\n  binaryTargets = [\"native\", \"rhel-openssl-3.0.x\", \"linux-arm64-openssl-3.0.x\", \"linux-musl-arm64-openssl-3.0.x\"]\n}\n\n// Dedicated edge client for Cloudflare Workers\ngenerator edge {\n  provider        = \"prisma-client-js\"\n  output          = \"../generated/edge\"\n  binaryTargets   = [\"native\"]\n  previewFeatures = [\"driverAdapters\"]\n}\n\ndatasource db {\n  provider  = \"postgresql\"\n  url       = env(\"DATABASE_URL\")\n  directUrl = env(\"DIRECT_URL\")\n}\n\n//note that post current does not connect to a user\n//you would want to connect it to a user later\nmodel Post {\n  id        String   @id @default(uuid())\n  title     String   @db.VarChar(256)\n  content   String\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\n//Probably not needed because we can use the clerk user object to store the stripe customer id and access type\nmodel StripePayment {\n  id              String   @id @default(cuid())\n  clerkUserId     String // Clerk user ID\n  amount          Int // in cents\n  currency        String   @default(\"usd\")\n  status          String\n  stripePaymentId String   @unique\n  metadata        Json? // Optional metadata about the purchase\n  createdAt       DateTime @default(now())\n  updatedAt       DateTime @updatedAt\n\n  // Index to make querying by user efficient\n  @@index([clerkUserId])\n}\n\n// User model to link with Clerk users\nmodel User {\n  id                  String                 @id // This is the Clerk ID\n  firstName           String?\n  lastName            String?\n  username            String?                @unique\n  primaryEmailAddress String?                @unique\n  imageUrl            String?\n  clerkUserProperties Json? // Made optional to preserve existing data\n  entries             FounderLogEntry[]\n  reflections         FounderLogReflection[]\n  createdAt           DateTime               @default(now())\n  updatedAt           DateTime               @updatedAt\n}\n\n// Tags for categorizing founder log entries\nmodel FounderLogTag {\n  id        String               @id @default(cuid())\n  name      String               @unique\n  entries   FounderLogEntryTag[]\n  createdAt DateTime             @default(now())\n  updatedAt DateTime             @updatedAt\n}\n\n// Main founder log entry model\nmodel FounderLogEntry {\n  id          String               @id @default(cuid())\n  userId      String\n  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)\n  content     String\n  upvoteCount Int                  @default(0)\n  tags        FounderLogEntryTag[]\n  createdAt   DateTime             @default(now())\n  updatedAt   DateTime             @updatedAt\n\n  @@index([userId])\n}\n\n// Join table for many-to-many relationship between entries and tags\nmodel FounderLogEntryTag {\n  id        String          @id @default(cuid())\n  entryId   String\n  entry     FounderLogEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)\n  tagId     String\n  tag       FounderLogTag   @relation(fields: [tagId], references: [id], onDelete: Cascade)\n  createdAt DateTime        @default(now())\n\n  @@unique([entryId, tagId])\n  @@index([entryId])\n  @@index([tagId])\n}\n\n// Morning/evening reflections\nmodel FounderLogReflection {\n  id        String   @id @default(cuid())\n  userId    String\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  type      String // \"morning\" or \"evening\"\n  content   String\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([userId])\n}\n\n//User and and Stripe subscribers info is stored in the Clerk User object so it is not defined in this schema here\n",
  "inlineSchemaHash": "d26993210ab4492055fab0ab5011a7cf99e0e68729585c3abf3e8fcaa1318ce8",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Post\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"StripePayment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clerkUserId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"currency\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stripePaymentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"primaryEmailAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clerkUserProperties\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"entries\",\"kind\":\"object\",\"type\":\"FounderLogEntry\",\"relationName\":\"FounderLogEntryToUser\"},{\"name\":\"reflections\",\"kind\":\"object\",\"type\":\"FounderLogReflection\",\"relationName\":\"FounderLogReflectionToUser\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"FounderLogTag\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"entries\",\"kind\":\"object\",\"type\":\"FounderLogEntryTag\",\"relationName\":\"FounderLogEntryTagToFounderLogTag\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"FounderLogEntry\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"FounderLogEntryToUser\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"upvoteCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"tags\",\"kind\":\"object\",\"type\":\"FounderLogEntryTag\",\"relationName\":\"FounderLogEntryToFounderLogEntryTag\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"FounderLogEntryTag\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"entryId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"entry\",\"kind\":\"object\",\"type\":\"FounderLogEntry\",\"relationName\":\"FounderLogEntryToFounderLogEntryTag\"},{\"name\":\"tagId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tag\",\"kind\":\"object\",\"type\":\"FounderLogTag\",\"relationName\":\"FounderLogEntryTagToFounderLogTag\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"FounderLogReflection\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"FounderLogReflectionToUser\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

