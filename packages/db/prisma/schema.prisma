// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//binaryTargets to handle the client for production environment on vercel
//specify output locations so that path resolve work with turbo repo
generator client {
  provider = "prisma-client-js"
  output   = "../generated/node"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "linux-arm64-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

// Dedicated edge client for Cloudflare Workers
generator edge {
  provider = "prisma-client-js"
  output   = "../generated/edge"
  binaryTargets = ["native"]
  previewFeatures = ["driverAdapters"]
}

generator zod {
  provider       = "zod-prisma-types"
  output       = "../generated/zod-prisma-validators"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


//note that post current does not connect to a user
//you would want to connect it to a user later
model Post {
  id        String   @id @default(uuid())
  title     String   @db.VarChar(256)
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



enum AccessType {
  TRIAL
  FREE
  LIFETIME
  MONTHLY
  YEARLY
}

// User model to link with Clerk users
model User {
  id                  String               @id // This is the Clerk ID
  firstName           String?
  lastName            String?
  username            String?              @unique
  primaryEmailAddress String?              @unique
  imageUrl            String?
  clerkUserProperties Json?                // Made optional to preserve existing data
  stripeCustomerId    String?              @unique
  accessType          AccessType           @default(FREE)
  stripeUserProperties Json?
  entries             FounderLogEntry[]
  reflections         FounderLogReflection[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

// Tags for categorizing founder log entries
model FounderLogTag {
  id        String               @id @default(cuid())
  name      String               @unique
  entries   FounderLogEntryTag[]
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

// Main founder log entry model
model FounderLogEntry {
  id          String               @id @default(cuid())
  userId      String
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  content     String
  upvoteCount Int                  @default(0)
  tags        FounderLogEntryTag[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  @@index([userId])
}

// Join table for many-to-many relationship between entries and tags
model FounderLogEntryTag {
  id        String          @id @default(cuid())
  entryId   String
  entry     FounderLogEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
  tagId     String
  tag       FounderLogTag   @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt DateTime        @default(now())

  @@unique([entryId, tagId])
  @@index([entryId])
  @@index([tagId])
}

// Morning/evening reflections
model FounderLogReflection {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String   // "morning" or "evening"
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

//User and and Stripe subscribers info is stored in the Clerk User object so it is not defined in this schema here